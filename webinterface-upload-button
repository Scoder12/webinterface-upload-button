#!/usr/bin/env bash
# Copyright (c) 2023 rM-self-serve
# SPDX-License-Identifier: MIT

main() {
	# collect options before or after command
	no_prompt=false
	cmd=()
	for value in "$@"; do
		case $value in
		'-y' | '--no-prompt')
			no_prompt=true
			;;
		*)
			cmd+=("$value")
			;;
		esac
	done

	case ${cmd[@]} in
	'-h' | '--help' | '')
		cli_info
		;;
	'apply')
		checkspace
		apply
		;;
	'revert')
		checkspace
		revert
		;;
	*)
		echo 'input not recognized'
		cli_info
		;;
	esac
	true
}

checkspace() {
	if ! _checkspace / 50; then
		(
			echo "Not enough space on /"
			echo "Try to free space by running: journalctl --vacuum-time=1m"
			exit 10
		)
		exit 1
	fi
}

_checkspace() {
	part=$1
	needed=$2
	_available=$(df "$part" | tail -n1 | awk '{print $4}')
	available=$(("$_available"))
	if [ $available -lt "$needed" ]; then
		echo "Less than ${needed}K free, ${available}K"
		return 1
	fi
}

cli_info() {
	echo 'This program will add an upload button to the web interface.'
	echo 'Included funtionality to revert modification.'
	echo 'Source+Docs: https://github.com/rM-self-serve/webinterface-upload-button'
	echo ''
	echo -e "${CYAN}USAGE:${NC}"
	echo '  webint-upldbtn [OPTIONS] [COMMANDS]'
	echo ''
	echo -e "${CYAN}COMMANDS:${NC}"
	echo '  apply           Apply upload button modification'
	echo '  revert          Revert upload button modification'
	echo ''
	echo -e "${CYAN}OPTIONS:${NC}"
	echo '  -y, --no-promt  Do not show confirmation prompt'
	echo '  -h, --help      Show help'
}

refresh_html() {
	ndx_content=$(cat $index_file)
}

refresh_css() {
	css_content=$(tr -d '\n' <"$css_file")
}

vars() {
	webui_dir='/usr/share/remarkable/webui'
	index_file="${webui_dir}/index.html"
	refresh_html

	no_wspc_html=$(
		printf '
		<!-- lines added by webint-upldbtn (cli will not recognize if edited) -->
		<form method=post enctype=multipart/form-data action=upload>
			<input type=file name=file>
			<input type=submit value=Upload>
		</form>
		<!-- end webint-upldbtn -->' |
			tr -d "\n" | tr -d "\t"
	)
	sed_wspc_html=${no_wspc_html//[\/]/\\\/}

	css_file="${webui_dir}/$(echo "$ndx_content" | xargs -n 1 | grep -oE 'app-.+\.css')"
	refresh_css

	unmod_css='.list{position:fixed;width:70%;top:70px;bottom:0'
	moded_css='.list{position:fixed;width:70%;top:94px;bottom:0'
}

is_html_moded() {
	[[ "$ndx_content" == *"$no_wspc_html"* ]]
}

can_mod_html() {
	echo "$ndx_content" | grep -qh '<body>'
}

is_css_moded() {
	echo "$css_content" | grep -qh "$moded_css"
}

can_mod_css() {
	echo "$css_content" | grep -qh "$unmod_css"
}

prompt() {
	if [ "$no_prompt" = false ]; then
		read -r -p "Would you like to continue? [y/N] " response
		case "$response" in
		[yY][eE][sS] | [yY])
			true
			;;
		*)
			echo "Cancel"
			exit
			;;
		esac
	fi
}

apply() {
	vars

	echo "Applying webint-upldbtn will edit:"
	echo "$index_file"
	echo "$css_file"
	echo ""
	prompt

	apin=$(apply_index >&2)
	apcs=$(apply_css >&2)
	if [ "$apin" == false ] || [ "$apcs" == false ]; then
		exit 1
	fi
}

revert() {
	vars

	echo "Reverting webint-upldbtn will edit:"
	echo "$index_file"
	echo "$css_file"
	echo ""
	prompt

	rein=$(revert_index >&2)
	recs=$(revert_css >&2)
	if [ "$rein" == false ] || [ "$recs" == false ]; then
		exit 1
	fi
}

apply_index() {
	if is_html_moded; then
		echo "Html already modified"
		return 0
	fi
	if ! can_mod_html; then
		echo >&2 "Html unrecognized"
		return 1
	fi

	sed -i "s/<body>/<body>$sed_wspc_html/" "$index_file"

	refresh_html
	if ! is_html_moded; then
		echo >&2 "Error: Html not modified"
		return 1
	fi
	echo "Html modified"
}

revert_index() {
	if ! is_html_moded; then
		echo "Html has not been modified"
		return 0
	fi

	sed -i "s/$sed_wspc_html//g" "$index_file"

	refresh_html
	if is_html_moded; then
		echo >&2 "Error: Html not reverted"
		return 1
	fi
	echo "Html reverted"
}

apply_css() {
	if is_css_moded; then
		echo "Css already modified"
		return 0
	fi
	if ! can_mod_css; then
		echo >&2 "Css is not recognized"
		return 1
	fi

	sed -i "s/${unmod_css}/${moded_css}/" "$css_file"

	refresh_css
	if ! is_css_moded; then
		echo >&2 "Error: Css not modified"
		return 1
	fi
	echo "Css modified"
}

revert_css() {
	if ! is_css_moded; then
		echo "Css has not been modified"
		return 0
	fi

	sed -i "s/${moded_css}/${unmod_css}/" "$css_file"

	refresh_css
	if is_css_moded; then
		echo >&2 "Error: Css not reverted"
		return 1
	fi
	echo "Css reverted"
}

CYAN='\033[0;36m'
NC='\033[0m' # No Color

main "$@"
